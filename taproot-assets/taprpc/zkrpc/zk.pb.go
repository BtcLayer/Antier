// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.12.4
// source: zkrpc/zk.proto

// import "taprootassets.proto";

package zkrpc

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BatchState int32

const (
	BatchState_BATCH_STATE_UNKNOWN            BatchState = 0
	BatchState_BATCH_STATE_PEDNING            BatchState = 1
	BatchState_BATCH_STATE_FROZEN             BatchState = 2
	BatchState_BATCH_STATE_COMMITTED          BatchState = 3
	BatchState_BATCH_STATE_BROADCAST          BatchState = 4
	BatchState_BATCH_STATE_CONFIRMED          BatchState = 5
	BatchState_BATCH_STATE_FINALIZED          BatchState = 6
	BatchState_BATCH_STATE_SEEDLING_CANCELLED BatchState = 7
	BatchState_BATCH_STATE_SPROUT_CANCELLED   BatchState = 8
)

// Enum value maps for BatchState.
var (
	BatchState_name = map[int32]string{
		0: "BATCH_STATE_UNKNOWN",
		1: "BATCH_STATE_PEDNING",
		2: "BATCH_STATE_FROZEN",
		3: "BATCH_STATE_COMMITTED",
		4: "BATCH_STATE_BROADCAST",
		5: "BATCH_STATE_CONFIRMED",
		6: "BATCH_STATE_FINALIZED",
		7: "BATCH_STATE_SEEDLING_CANCELLED",
		8: "BATCH_STATE_SPROUT_CANCELLED",
	}
	BatchState_value = map[string]int32{
		"BATCH_STATE_UNKNOWN":            0,
		"BATCH_STATE_PEDNING":            1,
		"BATCH_STATE_FROZEN":             2,
		"BATCH_STATE_COMMITTED":          3,
		"BATCH_STATE_BROADCAST":          4,
		"BATCH_STATE_CONFIRMED":          5,
		"BATCH_STATE_FINALIZED":          6,
		"BATCH_STATE_SEEDLING_CANCELLED": 7,
		"BATCH_STATE_SPROUT_CANCELLED":   8,
	}
)

func (x BatchState) Enum() *BatchState {
	p := new(BatchState)
	*p = x
	return p
}

func (x BatchState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BatchState) Descriptor() protoreflect.EnumDescriptor {
	return file_zkrpc_zk_proto_enumTypes[0].Descriptor()
}

func (BatchState) Type() protoreflect.EnumType {
	return &file_zkrpc_zk_proto_enumTypes[0]
}

func (x BatchState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BatchState.Descriptor instead.
func (BatchState) EnumDescriptor() ([]byte, []int) {
	return file_zkrpc_zk_proto_rawDescGZIP(), []int{0}
}

type ZkProof struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Proof string `protobuf:"bytes,1,opt,name=proof,proto3" json:"proof,omitempty"`
	Time  string `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *ZkProof) Reset() {
	*x = ZkProof{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zkrpc_zk_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZkProof) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZkProof) ProtoMessage() {}

func (x *ZkProof) ProtoReflect() protoreflect.Message {
	mi := &file_zkrpc_zk_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZkProof.ProtoReflect.Descriptor instead.
func (*ZkProof) Descriptor() ([]byte, []int) {
	return file_zkrpc_zk_proto_rawDescGZIP(), []int{0}
}

func (x *ZkProof) GetProof() string {
	if x != nil {
		return x.Proof
	}
	return ""
}

func (x *ZkProof) GetTime() string {
	if x != nil {
		return x.Time
	}
	return ""
}

type CreateProofRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The zk proof to be created.
	Zkproof *ZkProof `protobuf:"bytes,1,opt,name=zkproof,proto3" json:"zkproof,omitempty"`
	// If true, then the zk proofs currently in the batch won't be returned in the
	// response. This is mainly to avoid a lot of data being transmitted and
	// possibly printed on the command line in the case of a very large batch.
	ShortResponse bool `protobuf:"varint,2,opt,name=short_response,json=shortResponse,proto3" json:"short_response,omitempty"`
}

func (x *CreateProofRequest) Reset() {
	*x = CreateProofRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zkrpc_zk_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateProofRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateProofRequest) ProtoMessage() {}

func (x *CreateProofRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zkrpc_zk_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateProofRequest.ProtoReflect.Descriptor instead.
func (*CreateProofRequest) Descriptor() ([]byte, []int) {
	return file_zkrpc_zk_proto_rawDescGZIP(), []int{1}
}

func (x *CreateProofRequest) GetZkproof() *ZkProof {
	if x != nil {
		return x.Zkproof
	}
	return nil
}

func (x *CreateProofRequest) GetShortResponse() bool {
	if x != nil {
		return x.ShortResponse
	}
	return false
}

type CreateProofResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The pending batch the proof was added to.
	PendingBatch *ZKProofBatch `protobuf:"bytes,1,opt,name=pending_batch,json=pendingBatch,proto3" json:"pending_batch,omitempty"`
}

func (x *CreateProofResponse) Reset() {
	*x = CreateProofResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zkrpc_zk_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateProofResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateProofResponse) ProtoMessage() {}

func (x *CreateProofResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zkrpc_zk_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateProofResponse.ProtoReflect.Descriptor instead.
func (*CreateProofResponse) Descriptor() ([]byte, []int) {
	return file_zkrpc_zk_proto_rawDescGZIP(), []int{2}
}

func (x *CreateProofResponse) GetPendingBatch() *ZKProofBatch {
	if x != nil {
		return x.PendingBatch
	}
	return nil
}

type ZKProofBatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A public key serialized in compressed format that can be used to uniquely
	// identify a pending minting batch. Responses that share the same key will be
	// batched into the same minting transaction.
	BatchKey []byte `protobuf:"bytes,1,opt,name=batch_key,json=batchKey,proto3" json:"batch_key,omitempty"`
	// The assets that are part of the batch.
	Zkproof []*ZkProof `protobuf:"bytes,2,rep,name=zkproof,proto3" json:"zkproof,omitempty"`
	// The state of the batch.
	State BatchState `protobuf:"varint,3,opt,name=state,proto3,enum=zkrpc.BatchState" json:"state,omitempty"`
}

func (x *ZKProofBatch) Reset() {
	*x = ZKProofBatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zkrpc_zk_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZKProofBatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZKProofBatch) ProtoMessage() {}

func (x *ZKProofBatch) ProtoReflect() protoreflect.Message {
	mi := &file_zkrpc_zk_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZKProofBatch.ProtoReflect.Descriptor instead.
func (*ZKProofBatch) Descriptor() ([]byte, []int) {
	return file_zkrpc_zk_proto_rawDescGZIP(), []int{3}
}

func (x *ZKProofBatch) GetBatchKey() []byte {
	if x != nil {
		return x.BatchKey
	}
	return nil
}

func (x *ZKProofBatch) GetZkproof() []*ZkProof {
	if x != nil {
		return x.Zkproof
	}
	return nil
}

func (x *ZKProofBatch) GetState() BatchState {
	if x != nil {
		return x.State
	}
	return BatchState_BATCH_STATE_UNKNOWN
}

type FinalizeBatchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If true, then the zk proof currently in the batch won't be returned in the
	// response. This is mainly to avoid a lot of data being transmitted and
	// possibly printed on the command line in the case of a very large batch.
	ShortResponse bool `protobuf:"varint,1,opt,name=short_response,json=shortResponse,proto3" json:"short_response,omitempty"`
}

func (x *FinalizeBatchRequest) Reset() {
	*x = FinalizeBatchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zkrpc_zk_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinalizeBatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinalizeBatchRequest) ProtoMessage() {}

func (x *FinalizeBatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zkrpc_zk_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinalizeBatchRequest.ProtoReflect.Descriptor instead.
func (*FinalizeBatchRequest) Descriptor() ([]byte, []int) {
	return file_zkrpc_zk_proto_rawDescGZIP(), []int{4}
}

func (x *FinalizeBatchRequest) GetShortResponse() bool {
	if x != nil {
		return x.ShortResponse
	}
	return false
}

type FinalizeBatchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The finalized batch.
	Batch *ZKProofBatch `protobuf:"bytes,1,opt,name=batch,proto3" json:"batch,omitempty"`
}

func (x *FinalizeBatchResponse) Reset() {
	*x = FinalizeBatchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zkrpc_zk_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinalizeBatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinalizeBatchResponse) ProtoMessage() {}

func (x *FinalizeBatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zkrpc_zk_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinalizeBatchResponse.ProtoReflect.Descriptor instead.
func (*FinalizeBatchResponse) Descriptor() ([]byte, []int) {
	return file_zkrpc_zk_proto_rawDescGZIP(), []int{5}
}

func (x *FinalizeBatchResponse) GetBatch() *ZKProofBatch {
	if x != nil {
		return x.Batch
	}
	return nil
}

type CancelBatchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CancelBatchRequest) Reset() {
	*x = CancelBatchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zkrpc_zk_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelBatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelBatchRequest) ProtoMessage() {}

func (x *CancelBatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zkrpc_zk_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelBatchRequest.ProtoReflect.Descriptor instead.
func (*CancelBatchRequest) Descriptor() ([]byte, []int) {
	return file_zkrpc_zk_proto_rawDescGZIP(), []int{6}
}

type CancelBatchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The internal public key of the batch.
	BatchKey []byte `protobuf:"bytes,1,opt,name=batch_key,json=batchKey,proto3" json:"batch_key,omitempty"`
}

func (x *CancelBatchResponse) Reset() {
	*x = CancelBatchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zkrpc_zk_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelBatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelBatchResponse) ProtoMessage() {}

func (x *CancelBatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zkrpc_zk_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelBatchResponse.ProtoReflect.Descriptor instead.
func (*CancelBatchResponse) Descriptor() ([]byte, []int) {
	return file_zkrpc_zk_proto_rawDescGZIP(), []int{7}
}

func (x *CancelBatchResponse) GetBatchKey() []byte {
	if x != nil {
		return x.BatchKey
	}
	return nil
}

type ListBatchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The optional batch key of the batch to list.
	//
	// Types that are assignable to Filter:
	//
	//	*ListBatchRequest_BatchKey
	//	*ListBatchRequest_BatchKeyStr
	Filter isListBatchRequest_Filter `protobuf_oneof:"filter"`
}

func (x *ListBatchRequest) Reset() {
	*x = ListBatchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zkrpc_zk_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBatchRequest) ProtoMessage() {}

func (x *ListBatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zkrpc_zk_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBatchRequest.ProtoReflect.Descriptor instead.
func (*ListBatchRequest) Descriptor() ([]byte, []int) {
	return file_zkrpc_zk_proto_rawDescGZIP(), []int{8}
}

func (m *ListBatchRequest) GetFilter() isListBatchRequest_Filter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (x *ListBatchRequest) GetBatchKey() []byte {
	if x, ok := x.GetFilter().(*ListBatchRequest_BatchKey); ok {
		return x.BatchKey
	}
	return nil
}

func (x *ListBatchRequest) GetBatchKeyStr() string {
	if x, ok := x.GetFilter().(*ListBatchRequest_BatchKeyStr); ok {
		return x.BatchKeyStr
	}
	return ""
}

type isListBatchRequest_Filter interface {
	isListBatchRequest_Filter()
}

type ListBatchRequest_BatchKey struct {
	// The optional batch key of the batch to list, specified as raw bytes
	// (gRPC only).
	BatchKey []byte `protobuf:"bytes,1,opt,name=batch_key,json=batchKey,proto3,oneof"`
}

type ListBatchRequest_BatchKeyStr struct {
	// The optional batch key of the batch to list, specified as a hex
	// encoded string (use this for REST).
	BatchKeyStr string `protobuf:"bytes,2,opt,name=batch_key_str,json=batchKeyStr,proto3,oneof"`
}

func (*ListBatchRequest_BatchKey) isListBatchRequest_Filter() {}

func (*ListBatchRequest_BatchKeyStr) isListBatchRequest_Filter() {}

type ListBatchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Batches []*ZKProofBatch `protobuf:"bytes,1,rep,name=batches,proto3" json:"batches,omitempty"`
}

func (x *ListBatchResponse) Reset() {
	*x = ListBatchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zkrpc_zk_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBatchResponse) ProtoMessage() {}

func (x *ListBatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zkrpc_zk_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBatchResponse.ProtoReflect.Descriptor instead.
func (*ListBatchResponse) Descriptor() ([]byte, []int) {
	return file_zkrpc_zk_proto_rawDescGZIP(), []int{9}
}

func (x *ListBatchResponse) GetBatches() []*ZKProofBatch {
	if x != nil {
		return x.Batches
	}
	return nil
}

var File_zkrpc_zk_proto protoreflect.FileDescriptor

var file_zkrpc_zk_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x7a, 0x6b, 0x72, 0x70, 0x63, 0x2f, 0x7a, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x05, 0x7a, 0x6b, 0x72, 0x70, 0x63, 0x22, 0x33, 0x0a, 0x07, 0x5a, 0x6b, 0x50, 0x72, 0x6f,
	0x6f, 0x66, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x65, 0x0a, 0x12,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x28, 0x0a, 0x07, 0x7a, 0x6b, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x7a, 0x6b, 0x72, 0x70, 0x63, 0x2e, 0x5a, 0x6b, 0x50, 0x72,
	0x6f, 0x6f, 0x66, 0x52, 0x07, 0x7a, 0x6b, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x25, 0x0a, 0x0e,
	0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x4f, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f,
	0x6f, 0x66, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x0d, 0x70, 0x65,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x7a, 0x6b, 0x72, 0x70, 0x63, 0x2e, 0x5a, 0x4b, 0x50, 0x72, 0x6f, 0x6f,
	0x66, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x0c, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x22, 0x7e, 0x0a, 0x0c, 0x5a, 0x4b, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x62, 0x61, 0x74, 0x63, 0x68, 0x4b, 0x65,
	0x79, 0x12, 0x28, 0x0a, 0x07, 0x7a, 0x6b, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x7a, 0x6b, 0x72, 0x70, 0x63, 0x2e, 0x5a, 0x6b, 0x50, 0x72, 0x6f,
	0x6f, 0x66, 0x52, 0x07, 0x7a, 0x6b, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x27, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x7a, 0x6b, 0x72,
	0x70, 0x63, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x22, 0x3d, 0x0a, 0x14, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e,
	0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x42, 0x0a, 0x15, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x05,
	0x62, 0x61, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x7a, 0x6b,
	0x72, 0x70, 0x63, 0x2e, 0x5a, 0x4b, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x52, 0x05, 0x62, 0x61, 0x74, 0x63, 0x68, 0x22, 0x14, 0x0a, 0x12, 0x43, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x32, 0x0a,
	0x13, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x62, 0x61, 0x74, 0x63, 0x68, 0x4b, 0x65,
	0x79, 0x22, 0x61, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x09, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x08, 0x62, 0x61, 0x74, 0x63,
	0x68, 0x4b, 0x65, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6b, 0x65,
	0x79, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x62,
	0x61, 0x74, 0x63, 0x68, 0x4b, 0x65, 0x79, 0x53, 0x74, 0x72, 0x42, 0x08, 0x0a, 0x06, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x22, 0x42, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x07, 0x62, 0x61, 0x74,
	0x63, 0x68, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x7a, 0x6b, 0x72,
	0x70, 0x63, 0x2e, 0x5a, 0x4b, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52,
	0x07, 0x62, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x2a, 0x88, 0x02, 0x0a, 0x0a, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x42, 0x41, 0x54, 0x43, 0x48,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x17, 0x0a, 0x13, 0x42, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x50, 0x45, 0x44, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x42, 0x41, 0x54,
	0x43, 0x48, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x52, 0x4f, 0x5a, 0x45, 0x4e, 0x10,
	0x02, 0x12, 0x19, 0x0a, 0x15, 0x42, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x54, 0x54, 0x45, 0x44, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15,
	0x42, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x42, 0x52, 0x4f, 0x41,
	0x44, 0x43, 0x41, 0x53, 0x54, 0x10, 0x04, 0x12, 0x19, 0x0a, 0x15, 0x42, 0x41, 0x54, 0x43, 0x48,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x52, 0x4d, 0x45, 0x44,
	0x10, 0x05, 0x12, 0x19, 0x0a, 0x15, 0x42, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x46, 0x49, 0x4e, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x06, 0x12, 0x22, 0x0a,
	0x1e, 0x42, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x45, 0x45,
	0x44, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10,
	0x07, 0x12, 0x20, 0x0a, 0x1c, 0x42, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x53, 0x50, 0x52, 0x4f, 0x55, 0x54, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45,
	0x44, 0x10, 0x08, 0x32, 0x9e, 0x02, 0x0a, 0x02, 0x5a, 0x4b, 0x12, 0x44, 0x0a, 0x0b, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x19, 0x2e, 0x7a, 0x6b, 0x72, 0x70,
	0x63, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x7a, 0x6b, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x4a, 0x0a, 0x0d, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x12, 0x1b, 0x2e, 0x7a, 0x6b, 0x72, 0x70, 0x63, 0x2e, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c,
	0x2e, 0x7a, 0x6b, 0x72, 0x70, 0x63, 0x2e, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x0b,
	0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x19, 0x2e, 0x7a, 0x6b,
	0x72, 0x70, 0x63, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x7a, 0x6b, 0x72, 0x70, 0x63, 0x2e, 0x43,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x40, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x73, 0x12, 0x17, 0x2e, 0x7a, 0x6b, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x7a, 0x6b, 0x72,
	0x70, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x42, 0x36, 0x5a, 0x34, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x69, 0x6e, 0x67, 0x6c, 0x61, 0x62, 0x73,
	0x2f, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x6f, 0x74, 0x2d, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x2f,
	0x74, 0x61, 0x70, 0x72, 0x70, 0x63, 0x2f, 0x7a, 0x6b, 0x72, 0x70, 0x63, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_zkrpc_zk_proto_rawDescOnce sync.Once
	file_zkrpc_zk_proto_rawDescData = file_zkrpc_zk_proto_rawDesc
)

func file_zkrpc_zk_proto_rawDescGZIP() []byte {
	file_zkrpc_zk_proto_rawDescOnce.Do(func() {
		file_zkrpc_zk_proto_rawDescData = protoimpl.X.CompressGZIP(file_zkrpc_zk_proto_rawDescData)
	})
	return file_zkrpc_zk_proto_rawDescData
}

var file_zkrpc_zk_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_zkrpc_zk_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_zkrpc_zk_proto_goTypes = []interface{}{
	(BatchState)(0),               // 0: zkrpc.BatchState
	(*ZkProof)(nil),               // 1: zkrpc.ZkProof
	(*CreateProofRequest)(nil),    // 2: zkrpc.CreateProofRequest
	(*CreateProofResponse)(nil),   // 3: zkrpc.CreateProofResponse
	(*ZKProofBatch)(nil),          // 4: zkrpc.ZKProofBatch
	(*FinalizeBatchRequest)(nil),  // 5: zkrpc.FinalizeBatchRequest
	(*FinalizeBatchResponse)(nil), // 6: zkrpc.FinalizeBatchResponse
	(*CancelBatchRequest)(nil),    // 7: zkrpc.CancelBatchRequest
	(*CancelBatchResponse)(nil),   // 8: zkrpc.CancelBatchResponse
	(*ListBatchRequest)(nil),      // 9: zkrpc.ListBatchRequest
	(*ListBatchResponse)(nil),     // 10: zkrpc.ListBatchResponse
}
var file_zkrpc_zk_proto_depIdxs = []int32{
	1,  // 0: zkrpc.CreateProofRequest.zkproof:type_name -> zkrpc.ZkProof
	4,  // 1: zkrpc.CreateProofResponse.pending_batch:type_name -> zkrpc.ZKProofBatch
	1,  // 2: zkrpc.ZKProofBatch.zkproof:type_name -> zkrpc.ZkProof
	0,  // 3: zkrpc.ZKProofBatch.state:type_name -> zkrpc.BatchState
	4,  // 4: zkrpc.FinalizeBatchResponse.batch:type_name -> zkrpc.ZKProofBatch
	4,  // 5: zkrpc.ListBatchResponse.batches:type_name -> zkrpc.ZKProofBatch
	2,  // 6: zkrpc.ZK.CreateProof:input_type -> zkrpc.CreateProofRequest
	5,  // 7: zkrpc.ZK.FinalizeBatch:input_type -> zkrpc.FinalizeBatchRequest
	7,  // 8: zkrpc.ZK.CancelBatch:input_type -> zkrpc.CancelBatchRequest
	9,  // 9: zkrpc.ZK.ListBatches:input_type -> zkrpc.ListBatchRequest
	3,  // 10: zkrpc.ZK.CreateProof:output_type -> zkrpc.CreateProofResponse
	6,  // 11: zkrpc.ZK.FinalizeBatch:output_type -> zkrpc.FinalizeBatchResponse
	8,  // 12: zkrpc.ZK.CancelBatch:output_type -> zkrpc.CancelBatchResponse
	10, // 13: zkrpc.ZK.ListBatches:output_type -> zkrpc.ListBatchResponse
	10, // [10:14] is the sub-list for method output_type
	6,  // [6:10] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_zkrpc_zk_proto_init() }
func file_zkrpc_zk_proto_init() {
	if File_zkrpc_zk_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_zkrpc_zk_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZkProof); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zkrpc_zk_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateProofRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zkrpc_zk_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateProofResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zkrpc_zk_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZKProofBatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zkrpc_zk_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinalizeBatchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zkrpc_zk_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinalizeBatchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zkrpc_zk_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelBatchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zkrpc_zk_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelBatchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zkrpc_zk_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBatchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zkrpc_zk_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBatchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_zkrpc_zk_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*ListBatchRequest_BatchKey)(nil),
		(*ListBatchRequest_BatchKeyStr)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_zkrpc_zk_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_zkrpc_zk_proto_goTypes,
		DependencyIndexes: file_zkrpc_zk_proto_depIdxs,
		EnumInfos:         file_zkrpc_zk_proto_enumTypes,
		MessageInfos:      file_zkrpc_zk_proto_msgTypes,
	}.Build()
	File_zkrpc_zk_proto = out.File
	file_zkrpc_zk_proto_rawDesc = nil
	file_zkrpc_zk_proto_goTypes = nil
	file_zkrpc_zk_proto_depIdxs = nil
}
